"SUFA" = "#FFD92F",      # Bright yellow
"SUFA_fixJs" = "#E5C494",  # Light brown
"Tetris_fixT" = "#B3B3B3"  # Light grey
)
# Ordering
df_long_1$method <- factor(df_long_1$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA"))
df_long_1$metric <- factor(df_long_1$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
#library(ggh4x)
plot_1 <-
ggplot(df_long_1, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors)
df_long_2$method <- factor(df_long_2$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA",                                                         "SUFA_fixJs", "Tetris_fixT"))
df_long_2$metric <- factor(df_long_2$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
plot_2 <-
ggplot(df_long_2, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
df_long$method <- factor(df_long$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA"))
df_long$metric <- factor(df_long$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
plot_3 <-
ggplot(df_long, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right"legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
df_long$method <- factor(df_long$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA"))
df_long$metric <- factor(df_long$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
plot_3 <-
ggplot(df_long, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)  # Smaller legend title
) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "Method",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
# Scenario setting
sc1_settings <- data.frame(
"x" = rep(0, 8),
"y" = 7:0/7,
"text" = c(
TeX("Scenario 1", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX("and", output="character"),
TeX("2 knwon covariates", output="character"),
TeX("$\\alpha_s \\sim MVN$", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
sc2_settings <- data.frame(
"x" = rep(0, 8),
"y" = 7:0/7,
"text" = c(
TeX("Scenario 2", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX(" and ", output="character"),
TeX("Study-specific factors", output="character"),
TeX("$J_s = (2, 1, 1, 1)$", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
sc3_settings <- data.frame(
"x" = rep(0, 7),
"y" = 6:0/6,
"text" = c(
TeX("Scenario 3", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX(" and ", output="character"),
TeX("Perturbation", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
library(patchwork)
layout <- "
ABBBBB
CDDDDD
EFFFFF
"
sc1_settings + plot_1 + sc2_settings + plot_2 + sc3_settings + plot_3 +
plot_layout(design=layout)
plot_2 <-
ggplot(df_long_2, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "none") +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
plot_3 <-
ggplot(df_long, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "none") +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "Method",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
sc1_settings + plot_1 + sc2_settings + plot_2 + sc3_settings + plot_3 +
plot_layout(design=layout)
#library(ggh4x)
plot_1 <-
ggplot(df_long_1, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "none") +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors)
plot_2 <-
ggplot(df_long_2, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
sc1_settings + plot_1 + sc2_settings + plot_2 + sc3_settings + plot_3 +
plot_layout(design=layout)
#library(ggh4x)
plot_1 <-
ggplot(df_long_1, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors)
df_long_2$method <- factor(df_long_2$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA",                                                         "SUFA_fixJs", "Tetris_fixT"))
df_long_2$metric <- factor(df_long_2$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
plot_2 <-
ggplot(df_long_2, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
df_long$method <- factor(df_long$method, levels = c("stackFA", "IndFA", "MOMSS", "BMSFA", "PFA", "SUFA"))
df_long$metric <- factor(df_long$metric, levels = c("RV_Phi", "RV_Lambda", "RV_SigmaMarginal", "Time_min", "RAM_MiB"))
plot_3 <-
ggplot(df_long, aes(x = method, y = value, colour = method)) +
geom_boxplot() +
# ggh4x::facet_grid2(scenario ~ metric, scales = "free",
#                    axes = "x", independent = "all") +
facet_wrap(~metric, scales = "free", nrow = 1) +
theme_classic()+
theme(panel.background = element_rect(fill = "white", color = NA),
panel.grid.major = element_line(color = "grey95"),  # Keep major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines (optional)
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
strip.background = element_rect(fill = "grey95", color = NA),
axis.text.x = element_text(angle = 45, hjust = 1, size = 7),  # Rotate x-axis labels
legend.position = "right",
legend.key.size = unit(0.4, "cm"),  # Smaller legend keys
legend.text = element_text(size = 8),  # Smaller legend text
legend.title = element_text(size = 9)  # Smaller legend title
) +  # Place the legend on the right-hand side
labs(#title = "Boxplot of Metrics by Method",
x = "Method",
y = "",
fill = "method") +
scale_color_manual(values = method_colors) +  # Use consistent color mapping
guides(colour = guide_legend(override.aes = list(size = 0.5)))
# Scenario setting
sc1_settings <- data.frame(
"x" = rep(0, 8),
"y" = 7:0/7,
"text" = c(
TeX("Scenario 1", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX("and", output="character"),
TeX("2 knwon covariates", output="character"),
TeX("$\\alpha_s \\sim MVN$", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
sc2_settings <- data.frame(
"x" = rep(0, 8),
"y" = 7:0/7,
"text" = c(
TeX("Scenario 2", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX(" and ", output="character"),
TeX("Study-specific factors", output="character"),
TeX("$J_s = (2, 1, 1, 1)$", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
sc3_settings <- data.frame(
"x" = rep(0, 7),
"y" = 6:0/6,
"text" = c(
TeX("Scenario 3", output="character"),
TeX("S = 4", output="character"),
TeX("P = 100", output="character"),
TeX("$N_s = (35, 35, 35, 35)$", output = "character"),
TeX("K = 6", output="character"),
TeX(" and ", output="character"),
TeX("Perturbation", output="character")
)
) %>%
ggplot(aes(x = x, y = y)) +
geom_text(aes(label = text), parse = TRUE, size = 10/.pt) +
ylim(c(-0.1,1.1))  +
theme_classic() +
theme(
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1)
)
library(patchwork)
layout <- "
ABBBBB
CDDDDD
EFFFFF
"
sc1_settings + plot_1 + sc2_settings + plot_2 + sc3_settings + plot_3 +
plot_layout(design=layout)
fit_sc2 <- readRDS("./RDS/sc2/sc2_1.rds")
fit_sc2 <- readRDS("./RDS/sc2/sc2_1.rds")
plot_loadings(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_loadings.png", width = 6, height = 7.5, units = "in")
# sc2
plot_covs(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_covs.png",  width = 6, height = 7.5, units = "in", dpi = 300)
plot_loadings(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_loadings.png", width = 7, height = 7.5, units = "in")
# sc2
plot_covs(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_covs.png",  width = 6, height = 7.5, units = "in", dpi = 300)
# sc2
plot_covs(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_covs.png",  width = 8, height = 7, units = "in", dpi = 300)
# sc2
plot_covs(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_covs.png",  width = 8, height = 7, units = "in", dpi = 300)
plot_loadings(fit_sc2$point_est, fit_sc2$true)
ggplot2::ggsave("./Figs/sc2_loadings.png", width = 8, height = 7, units = "in")
plot_loadings(fit_sc3$point_est, fit_sc3$true)
ggplot2::ggsave("./Figs/sc3_loadings.png", width = 6, height = 7, units = "in")
plot_loadings(fit_sc1$point_est, fit_sc1$true)
ggplot2::ggsave("./Figs/sc1_loadings.png", width = 6, height = 7, units = "in")
# sc1
plot_covs(fit_sc1$point_est, fit_sc1$true)
ggplot2::ggsave("./Figs/sc1_covs.png",  width = 6, height = 7, units = "in", dpi = 300)
# sc3
plot_covs(fit_sc3$point_est, fit_sc3$true)
ggplot2::ggsave("./Figs/sc3_covs.png",  width = 6, height = 7, units = "in", dpi = 300)
grid.arrange(plot_single(fit_sc2$SigmaLambdaList[[1]])+
ggtitle(TeX("$\\Psi_1$")),
plot_single(fit_sc2$SigmaLambdaList[[2]])+
ggtitle(TeX("$\\Psi_2$")),
plot_single(fit_sc2$SigmaLambdaList[[3]])+
ggtitle(TeX("$\\Psi_3$")),
plot_single(fit_sc2$SigmaLambdaList[[4]])+
ggtitle(TeX("$\\Psi_4$")),
nrow = 1)
fit_sc2$SigmaLambdaList[[1]]
grid.arrange(plot_single(fit_sc2$SigmaLambdaList[[1]])+
ggtitle(TeX("$\\Psi_1$")),
plot_single(fit_sc2$SigmaLambdaList[[2]])+
ggtitle(TeX("$\\Psi_2$")),
plot_single(fit_sc2$SigmaLambdaList[[3]])+
ggtitle(TeX("$\\Psi_3$")),
plot_single(fit_sc2$SigmaLambdaList[[4]])+
ggtitle(TeX("$\\Psi_4$")),
nrow = 1)
fit_sc2
fit_sc2$true$SigmaLambdaList
grid.arrange(plot_single(fit_sc2$true$SigmaLambdaList[[1]])+
ggtitle(TeX("$\\Psi_1$")),
plot_single(fit_sc2$true$SigmaLambdaList[[2]])+
ggtitle(TeX("$\\Psi_2$")),
plot_single(fit_sc2$true$SigmaLambdaList[[3]])+
ggtitle(TeX("$\\Psi_3$")),
plot_single(fit_sc2$true$SigmaLambdaList[[4]])+
ggtitle(TeX("$\\Psi_4$")),
nrow = 1)
#
# grid.arrange(plot_single(sim_B_small$LambdaList[[1]])+
#                ggtitle(TeX("$\\Lambda_1$"), size = 12),
#              plot_single(sim_B_small$LambdaList[[2]])+
#                ggtitle(TeX("$\\Lambda_2$")),
#              plot_single(sim_B_small$LambdaList[[3]])+
#                ggtitle(TeX("$\\Lambda_3$")),
#              nrow = 1)
#
grid.arrange(plot_single(fit_sc2$true$SigmaLambdaList[[1]])+
ggtitle(TeX("$\\Sigma_\\Lambda_s$")),
plot_single(fit_sc2$true$SigmaLambdaList[[2]])+
ggtitle(TeX("$\\Psi_2$")),
plot_single(fit_sc2$true$SigmaLambdaList[[3]])+
ggtitle(TeX("$\\Psi_3$")),
plot_single(fit_sc2$true$SigmaLambdaList[[4]])+
ggtitle(TeX("$\\Psi_4$")),
nrow = 1)
# Usage
plot_single(sim_PFA1$Phi)+
ggtitle(TeX("\\Phi"))
sc2_1 <- readRDS("C:/Users/liang/OneDrive - Brown University/2023-2/tutorial_git/RDS/sc2/sc2_1.rds")
View(sc2_1)
sc2_9 <- readRDS("C:/Users/liang/OneDrive - Brown University/2023-2/tutorial_git/RDS/sc2/sc2_9.rds")
View(sc2_9)
sc2_Tetris_9 <- readRDS("C:/Users/liang/OneDrive - Brown University/2023-2/tutorial_git/RDS/sc2/Tetris/sc2_Tetris_9.rds")
View(sc2_Tetris_9)
sc2_Tetris_9$metrics$common
