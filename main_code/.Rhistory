install.packages("doParallel")
install.packages("foreach")
install.packages("iterators")
install.packages("peakRAM")
install.packages("matlab")
install.packages("MatrixCorrelation")
install.packages("tydiverse")
install.packages("tidyverse")
library(tidyverse)
q()
install.packages("foreach")
install.packages("peakRAM")
devtools::install_github("AleAviP/BFR.BE")
install.packages("mombf")

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("sparseMatrixStats")
install.packages("mombf")

devtools::install_github("AleAviP/BFR.BE")
install.packages("doParallel")

install.packages("iterators")
install.packages("Rcpp")
install.packages("matlab")
library(foreach)
library(doParallel)
library(iterators)
library(peakRAM)
library(devtools)
packages <- c('MSFA', 'peakRAM', 'BFR.BE', 'tidyverse', 'matlab', 'MatrixCorrelation',"Rcpp","SUFA")
lapply(packages, library, character.only = TRUE)
source("./FBPFA-PFA.R")## It's neccessary because it seems the "FBPFA-PFA with fixed latent dim.R" depends on this.
source("./FBPFA-PFA with fixed latent dim.R")
source("./functions/gen_senerioSS.R")
source("./functions/gen_senerioBMSFA.R")
source("./functions/calculateRV.R")
source("./functions/post_BMSFA.R")
source("./functions/post_PFA.R")
source("./functions/measurements.R")
source("./functions/post_SUFA.R")
install.packages("MatrixCorrelation")
library(foreach)
library(doParallel)
library(iterators)
library(peakRAM)
library(devtools)
packages <- c('MSFA', 'peakRAM', 'BFR.BE', 'tidyverse', 'matlab', 'MatrixCorrelation',"Rcpp","SUFA")
lapply(packages, library, character.only = TRUE)
source("./FBPFA-PFA.R")## It's neccessary because it seems the "FBPFA-PFA with fixed latent dim.R" depends on this.
source("./FBPFA-PFA with fixed latent dim.R")
source("./functions/gen_senerioSS.R")
source("./functions/gen_senerioBMSFA.R")
source("./functions/calculateRV.R")
source("./functions/post_BMSFA.R")
source("./functions/post_PFA.R")
source("./functions/measurements.R")
source("./functions/post_SUFA.R")
q()
